#include "cache.h"

// ------------------------- DO NOT CHANGE -------------------------------- //
#define IP_TRACKER_COUNT 64           // Number of IP trackers
#define PREFETCH_DEGREE 5             // Prefetch degree
// ------------------------- DO NOT CHANGE -------------------------------- //

class IP_TRACKER {
  public:
    // ------------------------- Define the IP_TRACKER class here ------------------------- //
    uint64_t address;
    uint64_t ip;
    int stride;
    uint8_t state; //There will be total 4 states, RESET, INITIAL STATE, TRANSIENT STATE, CONFIDENT STATE
    uint64_t counter; //counter for LRU Policy
};

IP_TRACKER trackers[IP_TRACKER_COUNT];

// ------------------------- Initialize the prefetcher ------------------------- // 
void CACHE::l1d_prefetcher_initialize() 
{
	cout << "CPU " << cpu << " L1D IP-based stride prefetcher" << endl;
  for(int i=0;i<IP_TRACKER_COUNT;i++){
      trackers[i].address=0;
      trackers[i].state=0;//INITIAL STATE
      trackers[i].ip=0;
      trackers[i].stride=0;//(0) indicates no stride calculation before
      trackers[i].counter=0;
  }
}

// --------------- This is the main prefetcher operate function ---------------- // 
void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint8_t critical_ip_flag)
{
    uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;

    // ------------------------ Add IP-Stride pf_address logic here ----------------------- // 

    // prefetch_line(ip, addr, pf_address, FILL_L1, 0);
    bool is_present=0;
    int index=-1;
    for(int i=0;i<IP_TRACKER_COUNT;i++){
        if(trackers[i].ip!=0)
            trackers[i].counter++;
        if(trackers[i].ip==ip){
            index=i;
            is_present=1;
            trackers[i].counter=0;
        }
    }
    //if (((addr) >> LOG2_PAGE_SIZE) != (trackers[index].address >> LOG2_PAGE_SIZE)) {
    //        trackers[index].address = addr;
    //        return;
    //}
    if(is_present){
        if(trackers[index].state==0){
            trackers[index].stride=(addr>>LOG2_BLOCK_SIZE)-(trackers[index].address>>LOG2_BLOCK_SIZE);
            trackers[index].address=addr;
            trackers[index].state=1;
            return;
        }
        int new_stride=(addr>>LOG2_BLOCK_SIZE)-(trackers[index].address>>LOG2_BLOCK_SIZE);
        if(trackers[index].stride==new_stride){
            trackers[index].address=addr;
            trackers[index].state++;
            if(trackers[index].state>1){
                for(int i=0;i<PREFETCH_DEGREE;i++){
                    uint64_t pf_address=(((addr >> LOG2_BLOCK_SIZE)+((i+1)*new_stride))<<LOG2_BLOCK_SIZE);
                    if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE))
                      break;
                    prefetch_line(ip, addr, pf_address, FILL_L1, 0);
                }
            }
        }
        else{
            trackers[index].state=1;
            trackers[index].stride=(addr>>LOG2_BLOCK_SIZE)-(trackers[index].address>>LOG2_BLOCK_SIZE);
            trackers[index].address=addr;
        }
    }
    else{
        srand(time(0));
        int index=-1; 
        int maximum=-1;
        int flag=0;
        for(int i=0;i<IP_TRACKER_COUNT;i++){
            if(trackers[i].ip==0){
                index=i;
                flag=1;
                break;
            }
            // if(trackers_cplx[cpu][i].counter>maximum){
            //     maximum=trackers_cplx[cpu][i].counter;
            //     index=i;
            // }
        }
        if(flag==0){
            index=rand()% IP_TRACKER_COUNT;//Random Replacement Policy
        }
        trackers[index].ip=ip;
        trackers[index].address=addr;
        trackers[index].stride=0;
        trackers[index].state=0;
        trackers[index].counter=0;
    }

    return;
}

// ------------------------- DO NOT CHANGE -------------------------------- //
void CACHE::l1d_prefetcher_cache_fill(uint64_t v_addr, uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t v_evicted_addr, uint64_t evicted_addr, uint32_t metadata_in)
{
	return;
}

void CACHE::l1d_prefetcher_final_stats()
{
	cout << "CPU " << cpu << " L1D IP-based stride prefetcher final stats" << endl;
	cout << "Degree: " << PREFETCH_DEGREE << endl;
}
// ------------------------- DO NOT CHANGE -------------------------------- //